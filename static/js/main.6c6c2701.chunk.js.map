{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","_ref","movie","_jsxs","className","children","_jsx","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","addToList","query","setQuery","useState","error","setError","setMovie","isLoading","setIsLoading","_Fragment","onSubmit","async","event","preventDefault","data","fetch","concat","then","res","json","catch","Response","Error","getMovie","trim","Title","Plot","Poster","imdbID","processedData","htmlFor","type","id","placeholder","classNames","value","onChange","inputHandler","target","disabled","length","onClick","App","setMovies","item","some","existingMovie","prev","ReactDOM","render","document","getElementById"],"mappings":"2SAQO,MAAMA,EAA6BC,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAClDE,eAAA,OAAKC,UAAU,OAAO,UAAQ,YAAWC,SAAA,CACvCC,cAAA,OAAKF,UAAU,aAAYC,SACzBC,cAAA,UAAQF,UAAU,gBAAeC,SAC/BC,cAAA,OACE,UAAQ,cACRC,IAAKL,EAAMM,OACXC,IAAI,kBAIVN,eAAA,OAAKC,UAAU,eAAcC,SAAA,CAC3BF,eAAA,OAAKC,UAAU,QAAOC,SAAA,CACpBC,cAAA,OAAKF,UAAU,aAAYC,SACzBC,cAAA,UAAQF,UAAU,iBAAgBC,SAChCC,cAAA,OACEC,IAAI,wBACJE,IAAI,aAIVH,cAAA,OAAKF,UAAU,gBAAeC,SAC5BC,cAAA,KAAGF,UAAU,aAAa,UAAQ,aAAYC,SAAEH,EAAMQ,aAI1DP,eAAA,OAAKC,UAAU,UAAU,UAAQ,mBAAkBC,SAAA,CAChDH,EAAMS,YACPL,cAAA,SACAA,cAAA,KAAGM,KAAMV,EAAMW,QAAS,UAAQ,WAAUR,SAAC,iBAK3C,EChCKS,EAA8Bb,IAAA,IAAC,OAAEc,GAAQd,EAAA,OACpDK,cAAA,OAAKF,UAAU,SAAQC,SACpBU,EAAOC,KAAId,GACVI,cAACN,EAAS,CAERE,MAAOA,GADFA,EAAMe,WAIX,E,0BCND,MAAMC,EAAsCjB,IAAoB,IAAnB,UAAEkB,GAAWlB,EAC/D,MAAOmB,EAAOC,GAAYC,mBAAS,KAC5BC,EAAOC,GAAYF,oBAAS,IAC5BpB,EAAOuB,GAAYH,sBACnBI,EAAWC,GAAgBL,oBAAS,GAsD3C,OACEnB,eAAAyB,WAAA,CAAAvB,SAAA,CACEF,eAAA,QAAMC,UAAU,aAAayB,SAjDRC,UACvBC,EAAMC,iBACNL,GAAa,GAEb,IACE,MAAMM,QCvBL,SAAkBb,GACvB,OAAOc,MAAM,GAADC,OAHE,sDAGS,OAAAA,OAAMf,IAC1BgB,MAAKC,GAAOA,EAAIC,SAChBC,OAAM,MACLC,SAAU,QACVC,MAAO,sBAEb,CDgByBC,CAAStB,GAE5B,GAAI,UAAWa,GAAyB,KAAjBb,EAAMuB,OAC3BnB,GAAS,GACTC,EAAS,UACJ,CACL,MAAM,MACJmB,EAAK,KACLC,EAAI,OACJC,EAAM,OACNC,GACEd,EAEEe,EAAgB,CACpBtC,MAAOkC,EACPjC,YAAakC,EACbrC,OAAmB,QAAXsC,EACJ,4DACAA,EACJjC,QAAQ,8BAADsB,OAAgCY,GACvC9B,OAAQ8B,GAGVtB,EAASuB,GACTxB,GAAS,EACX,CACF,CAAC,QACCG,GAAa,EACf,GAgB0DtB,SAAA,CACtDF,eAAA,OAAKC,UAAU,QAAOC,SAAA,CACpBC,cAAA,SAAOF,UAAU,QAAQ6C,QAAQ,cAAa5C,SAAC,gBAI/CC,cAAA,OAAKF,UAAU,UAASC,SACtBC,cAAA,SACE,UAAQ,aACR4C,KAAK,OACLC,GAAG,cACHC,YAAY,0BACZhD,UAAWiD,IAAW,QAAS,CAAE,aAAuB,IAAV9B,IAC9C+B,MAAOlC,EACPmC,SAAWD,IAAUE,OApEXzB,EAoEwBuB,EAnE5C9B,GAAS,QACTH,EAASU,EAAM0B,OAAOH,OAFxB,IAAsBvB,CAoE+B,MAI5CR,GACCjB,cAAA,KAAGF,UAAU,iBAAiB,UAAQ,eAAcC,SAAC,4CAMzDF,eAAA,OAAKC,UAAU,mBAAkBC,SAAA,CAC/BC,cAAA,OAAKF,UAAU,UAASC,SACtBC,cAAA,UACEoD,SAAUtC,EAAMuC,QAAU,EAC1B,UAAQ,eACRT,KAAK,SACL9C,UAAWiD,IAAW,kBACpB,CAAE,aAAc3B,IAAarB,SAE7BH,EAAyB,eAAjB,mBAIZA,IAAUqB,GACVjB,cAAA,OAAKF,UAAU,UAASC,SACtBC,cAAA,UACE,UAAQ,YACR4C,KAAK,SACL9C,UAAU,oBACVwD,QAzDd,WACM1D,IACFiB,EAAUjB,GAEVmB,EAAS,IACTG,GAAS,GACTC,EAAS,MACTE,GAAa,GAEjB,EAgDuCtB,SAC1B,4BASRH,GACCC,eAAA,OAAKC,UAAU,YAAY,UAAQ,mBAAkBC,SAAA,CACnDC,cAAA,MAAIF,UAAU,QAAOC,SAAC,YACrBH,GAASI,cAACN,EAAS,CAACE,MAAOA,SAI/B,EE/HM2D,EAAMA,KACjB,MAAO9C,EAAQ+C,GAAaxC,mBAAkB,IAQ9C,OACEnB,eAAA,OAAKC,UAAU,OAAMC,SAAA,CACnBC,cAAA,OAAKF,UAAU,eAAcC,SAC3BC,cAACQ,EAAU,CAACC,OAAQA,MAGtBT,cAAA,OAAKF,UAAU,UAASC,SACtBC,cAACY,EAAS,CAACC,UAbE4C,IACZhD,EAAOiD,MAAKC,GAAiBA,EAAchD,SAAW8C,EAAK9C,UAC9D6C,GAAUI,GAAQ,IAAIA,EAAMH,IAC9B,QAYM,ECpBVI,IAASC,OAAO9D,cAACuD,EAAG,IAAKQ,SAASC,eAAe,Q","file":"static/js/main.6c6c2701.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","/* eslint-disable @typescript-eslint/no-shadow */\nimport React, { ChangeEvent, useState } from 'react';\nimport classNames from 'classnames';\nimport './FindMovie.scss';\nimport { getMovie } from '../../api';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface FindMovieProps {\n  addToList: (item: Movie) => void\n}\n\nexport const FindMovie: React.FC<FindMovieProps> = ({ addToList }) => {\n  const [query, setQuery] = useState('');\n  const [error, setError] = useState(false);\n  const [movie, setMovie] = useState<null | Movie>();\n  const [isLoading, setIsLoading] = useState(false);\n\n  function inputHandler(event: ChangeEvent<HTMLInputElement>) {\n    setError(false);\n    setQuery(event.target.value);\n  }\n\n  const findMovieHandler = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const data = await getMovie(query);\n\n      if ('Error' in data || query.trim() === '') {\n        setError(true);\n        setMovie(null);\n      } else {\n        const {\n          Title,\n          Plot,\n          Poster,\n          imdbID,\n        } = data;\n\n        const processedData = {\n          title: Title,\n          description: Plot,\n          imgUrl: Poster === 'N/A'\n            ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n            : Poster,\n          imdbUrl: `https://www.imdb.com/title/${imdbID}`,\n          imdbId: imdbID,\n        };\n\n        setMovie(processedData);\n        setError(false);\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  function addMovieHandler() {\n    if (movie) {\n      addToList(movie);\n\n      setQuery('');\n      setError(false);\n      setMovie(null);\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={findMovieHandler}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames('input', { 'is-danger': error === true })}\n              value={query}\n              onChange={(value) => inputHandler(value)}\n            />\n          </div>\n\n          {error && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              disabled={query.length <= 0}\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames('button is-light',\n                { 'is-loading': isLoading })}\n            >\n              {!movie ? 'Find a movie' : 'Search again'}\n            </button>\n          </div>\n\n          {(movie && !error) && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={addMovieHandler}\n              >\n                Add to the list\n              </button>\n            </div>\n          ) }\n\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          {movie && <MovieCard movie={movie} />}\n        </div>\n      )}\n\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'http://www.omdbapi.com/?i=tt3896198&apikey=1291eeab';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const addToList = (item: Movie) => {\n    if (!movies.some(existingMovie => existingMovie.imdbId === item.imdbId)) {\n      setMovies(prev => [...prev, item]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie addToList={addToList} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}